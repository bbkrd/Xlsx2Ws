/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package de.bundesbank.jdemetra.xlsx2ws.wizard;

import de.bundesbank.jdemetra.xlsx2ws.spec.X13SpecificationSetting;
import de.bundesbank.jdemetra.xlsx2ws.spec.x13.X13MainSetting;
import de.bundesbank.jdemetra.xlsx2ws.spec.x13.X13MainSettingDTO;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JCheckBox;
import javax.swing.JPanel;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

public final class X13SettingVisual extends JPanel {

    private final List<ChangeListener> listeners = new ArrayList<>();

    public X13SettingVisual() {
        initComponents();
        series.addItemListener(new SettingItemListener(X13MainSetting.SERIES));
        estimate.addItemListener(new SettingItemListener(X13MainSetting.ESTIMATE));
        transform.addItemListener(new SettingItemListener(X13MainSetting.TRANSFORM));
        regression.addItemListener(new SettingItemListener(X13MainSetting.REGRESSION));
        outlier.addItemListener(new SettingItemListener(X13MainSetting.OUTLIER));
        arima.addItemListener(new SettingItemListener(X13MainSetting.ARIMA));
        x11.addItemListener(new SettingItemListener(X13MainSetting.X11));
    }

    @Override
    public String getName() {
        return "X13 Specification";
    }

    public X13SpecificationSetting createSetting() {
        return new X13SpecificationSetting(series.isSelected(), estimate.isSelected(), transform.isSelected(),
                regression.isSelected(), outlier.isSelected(), arima.isSelected(), x11.isSelected());

    }

    public void addChangeListener(ChangeListener l) {
        listeners.add(l);
    }

    public void removeChangeListener(ChangeListener l) {
        listeners.remove(l);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.JLabel jLabel1 = new javax.swing.JLabel();
        series = new javax.swing.JCheckBox();
        estimate = new javax.swing.JCheckBox();
        transform = new javax.swing.JCheckBox();
        regression = new javax.swing.JCheckBox();
        outlier = new javax.swing.JCheckBox();
        arima = new javax.swing.JCheckBox();
        x11 = new javax.swing.JCheckBox();
        all = new javax.swing.JButton();
        none = new javax.swing.JButton();

        setPreferredSize(new java.awt.Dimension(430, 312));

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(X13SettingVisual.class, "X13SettingVisual.jLabel1.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(series, org.openide.util.NbBundle.getMessage(X13SettingVisual.class, "X13SettingVisual.series.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(estimate, org.openide.util.NbBundle.getMessage(X13SettingVisual.class, "X13SettingVisual.estimate.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(transform, org.openide.util.NbBundle.getMessage(X13SettingVisual.class, "X13SettingVisual.transform.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(regression, org.openide.util.NbBundle.getMessage(X13SettingVisual.class, "X13SettingVisual.regression.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(outlier, org.openide.util.NbBundle.getMessage(X13SettingVisual.class, "X13SettingVisual.outlier.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(arima, org.openide.util.NbBundle.getMessage(X13SettingVisual.class, "X13SettingVisual.arima.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(x11, org.openide.util.NbBundle.getMessage(X13SettingVisual.class, "X13SettingVisual.x11.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(all, org.openide.util.NbBundle.getMessage(X13SettingVisual.class, "X13SettingVisual.all.text")); // NOI18N
        all.setMaximumSize(new java.awt.Dimension(89, 23));
        all.setMinimumSize(new java.awt.Dimension(89, 23));
        all.setPreferredSize(new java.awt.Dimension(89, 23));
        all.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                allActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(none, org.openide.util.NbBundle.getMessage(X13SettingVisual.class, "X13SettingVisual.none.text")); // NOI18N
        none.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                noneActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(x11)
                    .addComponent(arima)
                    .addComponent(outlier)
                    .addComponent(regression)
                    .addComponent(transform)
                    .addComponent(estimate)
                    .addComponent(series)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(all, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(none)))
                .addContainerGap(55, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(series)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(estimate)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(transform)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(regression)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(outlier)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(arima)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(x11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 55, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(all, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(none))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void allActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_allActionPerformed
        changeAllCheckboxes(true);
    }//GEN-LAST:event_allActionPerformed

    private void noneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_noneActionPerformed
        changeAllCheckboxes(false);
    }//GEN-LAST:event_noneActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton all;
    private javax.swing.JCheckBox arima;
    private javax.swing.JCheckBox estimate;
    private javax.swing.JButton none;
    private javax.swing.JCheckBox outlier;
    private javax.swing.JCheckBox regression;
    private javax.swing.JCheckBox series;
    private javax.swing.JCheckBox transform;
    private javax.swing.JCheckBox x11;
    // End of variables declaration//GEN-END:variables

    public void changeAllCheckboxes(boolean selected) {
        series.setSelected(selected);
        estimate.setSelected(selected);
        transform.setSelected(selected);
        regression.setSelected(selected);
        outlier.setSelected(selected);
        arima.setSelected(selected);
        x11.setSelected(selected);
    }

    private class SettingItemListener implements ItemListener {

        private final X13MainSetting setting;

        public SettingItemListener(X13MainSetting setting) {
            this.setting = setting;
        }

        @Override
        public void itemStateChanged(ItemEvent ev) {
            ChangeEvent changeEvent = null;
            boolean selected = ((JCheckBox) ev.getItem()).isSelected();
            for (ChangeListener x : listeners) {
                if (changeEvent == null) {
                    changeEvent = new ChangeEvent(new X13MainSettingDTO(setting, selected));
                }
                x.stateChanged(changeEvent);
            }
        }
    }

}
