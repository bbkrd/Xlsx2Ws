/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package de.bundesbank.jdemetra.xlsx2ws.wizard;

import de.bundesbank.jdemetra.xlsx2ws.spec.X13SpecificationSetting;
import javax.swing.JPanel;

public final class X13SettingVisual extends JPanel {

    /** Creates new form ChooseVisualPanel3 */
    public X13SettingVisual() {
        initComponents();
    }

    @Override
    public String getName() {
        return "X13 Specification";
    }

    public X13SpecificationSetting createSetting() {
        return new X13SpecificationSetting(series.isSelected(), estimate.isSelected(), transform.isSelected(),
                regression.isSelected(), outlier.isSelected(), arima.isSelected(), x11.isSelected());

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.JLabel jLabel1 = new javax.swing.JLabel();
        series = new javax.swing.JCheckBox();
        estimate = new javax.swing.JCheckBox();
        transform = new javax.swing.JCheckBox();
        regression = new javax.swing.JCheckBox();
        outlier = new javax.swing.JCheckBox();
        arima = new javax.swing.JCheckBox();
        x11 = new javax.swing.JCheckBox();

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(X13SettingVisual.class, "X13SettingVisual.jLabel1.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(series, org.openide.util.NbBundle.getMessage(X13SettingVisual.class, "X13SettingVisual.series.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(estimate, org.openide.util.NbBundle.getMessage(X13SettingVisual.class, "X13SettingVisual.estimate.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(transform, org.openide.util.NbBundle.getMessage(X13SettingVisual.class, "X13SettingVisual.transform.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(regression, org.openide.util.NbBundle.getMessage(X13SettingVisual.class, "X13SettingVisual.regression.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(outlier, org.openide.util.NbBundle.getMessage(X13SettingVisual.class, "X13SettingVisual.outlier.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(arima, org.openide.util.NbBundle.getMessage(X13SettingVisual.class, "X13SettingVisual.arima.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(x11, org.openide.util.NbBundle.getMessage(X13SettingVisual.class, "X13SettingVisual.x11.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(x11)
                    .addComponent(arima)
                    .addComponent(outlier)
                    .addComponent(regression)
                    .addComponent(transform)
                    .addComponent(estimate)
                    .addComponent(series)
                    .addComponent(jLabel1))
                .addContainerGap(28, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(series)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(estimate)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(transform)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(regression)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(outlier)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(arima)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(x11)
                .addContainerGap(89, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox arima;
    private javax.swing.JCheckBox estimate;
    private javax.swing.JCheckBox outlier;
    private javax.swing.JCheckBox regression;
    private javax.swing.JCheckBox series;
    private javax.swing.JCheckBox transform;
    private javax.swing.JCheckBox x11;
    // End of variables declaration//GEN-END:variables
}
