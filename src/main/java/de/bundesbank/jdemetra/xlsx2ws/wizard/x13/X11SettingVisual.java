/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package de.bundesbank.jdemetra.xlsx2ws.wizard.x13;

import de.bundesbank.jdemetra.xlsx2ws.spec.x13.X11Setting;
import javax.swing.JPanel;

public final class X11SettingVisual extends JPanel {

    public X11SettingVisual() {
        initComponents();
    }

    @Override
    public String getName() {
        return "X11 Settings (X13)";
    }

    public X11Setting createSetting() {
        return new X11Setting(
                cbMode.isSelected(),
                cbSeasonal.isSelected(),
                cbLowerSigma.isSelected(),
                cbUpperSigma.isSelected(),
                cbSeasonalFilter.isSelected(),
                cbHenderson.isSelected(),
                cbCalendarSigma.isSelected(),
                cbExcludeForecast.isSelected(),
                cbBiasCorrection.isSelected(),
                cbMaxLead.isSelected(),
                cbMaxBack.isSelected());

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.JLabel jLabel1 = new javax.swing.JLabel();
        cbMode = new javax.swing.JCheckBox();
        cbSeasonal = new javax.swing.JCheckBox();
        cbLowerSigma = new javax.swing.JCheckBox();
        cbUpperSigma = new javax.swing.JCheckBox();
        cbSeasonalFilter = new javax.swing.JCheckBox();
        cbHenderson = new javax.swing.JCheckBox();
        cbCalendarSigma = new javax.swing.JCheckBox();
        cbExcludeForecast = new javax.swing.JCheckBox();
        cbBiasCorrection = new javax.swing.JCheckBox();
        cbMaxLead = new javax.swing.JCheckBox();
        cbMaxBack = new javax.swing.JCheckBox();

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, "Choose which parts of the X11 specification should be written to the XLSX.");

        org.openide.awt.Mnemonics.setLocalizedText(cbMode, "Mode");

        org.openide.awt.Mnemonics.setLocalizedText(cbSeasonal, "Seasonal");

        org.openide.awt.Mnemonics.setLocalizedText(cbLowerSigma, "Lower sigma");

        org.openide.awt.Mnemonics.setLocalizedText(cbUpperSigma, "Upper sigma");

        org.openide.awt.Mnemonics.setLocalizedText(cbSeasonalFilter, "Seasonal filter");

        org.openide.awt.Mnemonics.setLocalizedText(cbHenderson, "Henderson");

        org.openide.awt.Mnemonics.setLocalizedText(cbCalendarSigma, "Calendar sigma");

        org.openide.awt.Mnemonics.setLocalizedText(cbExcludeForecast, "Exclude forecast");

        org.openide.awt.Mnemonics.setLocalizedText(cbBiasCorrection, "Bias correction");

        org.openide.awt.Mnemonics.setLocalizedText(cbMaxLead, "Forecast");

        org.openide.awt.Mnemonics.setLocalizedText(cbMaxBack, "Backcast");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cbSeasonal)
                            .addComponent(cbMode)
                            .addComponent(cbLowerSigma)
                            .addComponent(cbUpperSigma))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cbExcludeForecast)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(cbSeasonalFilter)
                                    .addComponent(cbHenderson)
                                    .addComponent(cbCalendarSigma))
                                .addGap(32, 32, 32)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(cbMaxLead)
                                    .addComponent(cbMaxBack)
                                    .addComponent(cbBiasCorrection))))))
                .addContainerGap(41, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbMode)
                    .addComponent(cbSeasonalFilter)
                    .addComponent(cbBiasCorrection))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbSeasonal)
                    .addComponent(cbHenderson)
                    .addComponent(cbMaxLead))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbLowerSigma)
                    .addComponent(cbCalendarSigma)
                    .addComponent(cbMaxBack))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbUpperSigma)
                    .addComponent(cbExcludeForecast))
                .addContainerGap(122, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox cbBiasCorrection;
    private javax.swing.JCheckBox cbCalendarSigma;
    private javax.swing.JCheckBox cbExcludeForecast;
    private javax.swing.JCheckBox cbHenderson;
    private javax.swing.JCheckBox cbLowerSigma;
    private javax.swing.JCheckBox cbMaxBack;
    private javax.swing.JCheckBox cbMaxLead;
    private javax.swing.JCheckBox cbMode;
    private javax.swing.JCheckBox cbSeasonal;
    private javax.swing.JCheckBox cbSeasonalFilter;
    private javax.swing.JCheckBox cbUpperSigma;
    // End of variables declaration//GEN-END:variables

}
